'use strict';
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var yosay = require('yosay');
var path = require('path');

module.exports = yeoman.generators.Base.extend({
    initializing: function () {
        this.pkg = require('../package.json');
    },

    prompting: function () {
        var done = this.async();

        // Have Yeoman greet the user.
        this.log(yosay(
            'Welcome to the ' + chalk.red('fdfe') + ' generator!'
        ));

        var prompts = [
            {
                name: 'appName',
                message: 'What is your app\'s name ?',
                default: path.basename(this.destinationRoot())
            }
        ];

        this.prompt(prompts, function (props) {
            this.appName = props.appName;

            done();
        }.bind(this));
    },

    writing: {
        app: function () {
            this.directory('app', 'app');
            this.directory('helper', 'helper');
            this.directory('scripts', 'scripts');
            this.directory('test', 'test');
            this.fs.copyTpl(
                this.templatePath('package.json'),
                this.destinationPath('package.json'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('gulpfile.js'),
                this.destinationPath('gulpfile.js'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('package.json'),
                this.destinationPath('package.json'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('webpack.build.config.js'),
                this.destinationPath('webpack.build.config.js'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('webpack.config.js'),
                this.destinationPath('webpack.config.js'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('webpack.dev.config.js'),
                this.destinationPath('webpack.dev.config.js'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('webpack.dev.server.js'),
                this.destinationPath('webpack.dev.server.js'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('webpack.preDeploy.config.js'),
                this.destinationPath('webpack.preDeploy.config.js'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('post-deploy.sh'),
                this.destinationPath('post-deploy.sh'),
                {appName: this.appName}
            );
            this.fs.copyTpl(
                this.templatePath('pre-deploy.sh'),
                this.destinationPath('pre-deploy.sh'),
                {appName: this.appName}
            );
        },

        projectfiles: function () {
            this.fs.copy(
                this.templatePath('.eslintrc'),
                this.destinationPath('.eslintrc')
            );
        }
    },

    install: function () {
        this.installDependencies({
            skipInstall: this.options['skip-install']
        });
    }
});
